{"version":3,"sources":["services/userService.js","components/AlertComponent.js","services/MediumService.js","reducers/mediumReducer.js","components/NavComponent.js","container/NavContainer.js","components/ProfileEditComponent.js","components/RegisterComponent.js","components/LoginComponent.js","container/LoginContainer.js","components/LogoutComponent.js","container/LogoutContainer.js","services/WatchlistService.js","reducers/watchlistReducer.js","components/WatchlistCardComponent.js","components/WatchlistListComponent.js","container/TopWatchlistsContainer.js","components/MediumListComponent.js","components/MediumCardComponent.js","components/MediumGridComponent.js","components/WatchlistBarComponent.js","container/WatchlistBarContainer.js","components/SearchMediaComponent.js","container/SearchMediaContainer.js","components/HomeComponent.js","container/HomeContainer.js","container/MediaDetailsContainer.js","components/WatchlistDetailsComponent.js","container/WatchlistDetailsContainer.js","WhatToWatch.js","serviceWorker.js","reducers/userReducer.js","index.js"],"names":["url","username","password","fetch","body","JSON","stringify","headers","method","credentials","then","response","json","updatedUser","userId","AlertComponent","alertType","message","clear","className","onClick","icon","faTimes","createMedium","medium","findMediaForUser","findMediaForWatchlist","watchlistId","findMediumById","mediumId","findAllMedia","updateMedium","deleteMedium","searchMediaByTitle","title","TVDB","require","this","tvdb","initialState","media","error","mediumReducer","state","event","type","newMedium","filter","id","map","updatedMedium","NavComponent","searchTerm","errorMessage","componentDidMount","props","getProfile","match","params","setState","decodeURI","handleKeys","e","key","search","history","push","encodeURI","searchMedia","render","to","faTv","size","placeholder","aria-label","onKeyPress","onChange","target","value","faSearch","role","data-toggle","aria-haspopup","aria-expanded","faUserCircle","user","aria-labelledby","prevProps","prevState","snapshot","React","Component","NavContainer","connect","ownProps","userReducer","dispatch","MediumService","actualMedia","userService","foundUser","logout","ProfileEditComponent","email","bio","imageUrl","successMessage","catch","console","validate","isValid","includes","update","deleteUser","class","tabindex","aria-hidden","data-dismiss","htmlFor","disabled","data-target","RegisterComponent","verifyPassword","register","currentUser","log","toString","for","LoginComponent","login","setError","LoginContainer","LogoutComponent","LogoutContainer","createWatchlist","watchlist","findWatchlistsForUser","findWatchlistById","findAllWatchlists","updateWatchlist","deleteWatchlist","watchlists","selectedWatchlists","watchlistReducer","newWatchlist","updatedWatchlist","WatchlistCardComponent","ownerId","ownerResp","owner","toggleHover","hover","getImage","onMouseEnter","onMouseLeave","style","Tooltip","WatchlistListComponent","TopWatchlistContainer","editingWatchlist","WatchlistService","actualWatchlists","MediumListComponent","sortDescription","toggleSort","sortMedia","sortAZdesc","sort","a","b","localeCompare","sortAZasc","MediumCardComponent","toggleSelected","selected","IconButton","faCheckCircle","faCircle","inverse","faPlusCircle","Date","firstAired","getFullYear","tvdbId","MediumGridComponent","WatchlistBarComponent","Row","faEllipsisV","faPlus","Link","WatchlistBarContainer","watchMedia","i","watchMedium","resp","length","watchlistsForUser","newWatchlistData","didUpdate","actualNewWatchlist","status","selectWatchlists","watchlistIds","SearchMediaComponent","SearchMediaContainer","selectedMedia","mediaForUser","newMediumData","actualNewMedium","HomeComponent","Container","fluid","HomeContainer","MediaDetailsContainer","WatchlistDetailsComponent","isEditing","updatedTitle","toggleEditing","save","setWatchlist","faCheck","faPencilAlt","WatchlistDetailsContainer","actualWatchlist","updatedWidget","WhatToWatch","path","exact","component","Boolean","window","location","hostname","reducers","combineReducers","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7b1cadc.chunk.js","sourcesContent":["//const url = 'http://localhost:8080/api';\nconst url = 'https://acabey-server-java.herokuapp.com/api';\n\nexport const login = (username, password) =>\n    fetch(`${url}/login`, {\n        body: JSON.stringify({\n            username: username,\n            password: password}),\n        headers: {\n            'content-type': 'application/json'\n        },\n        method: 'POST',\n        credentials: \"include\"\n    }).then(response => response.json());\n\n\nexport const logout = () =>\n    fetch(`${url}/logout`, {\n        method: 'POST',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport const register = (username, password) =>\n    fetch(`${url}/register`, {\n        body: JSON.stringify({\n            username: username,\n            password: password\n        }),\n        headers: {\n            'content-type': 'application/json'\n        },\n        method: 'POST',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport const getProfile = () =>\n    fetch(`${url}/profile`, {\n        method: 'GET',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport const getProfileForUser = (username) =>\n    fetch(`${url}/profile/${username}`, {\n        method: 'GET',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport const getProfileById = (userId) =>\n    fetch(`${url}/users/${userId}`, {\n        method: 'GET',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport const updateUser = (username, updatedUser) =>\n    fetch(`${url}/profile/${username}`, {\n        body: JSON.stringify(updatedUser),\n        headers: {\n            'content-type': 'application/json'\n        },\n        method: 'PUT',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport const deleteProfileByUsername = (username) =>\n    fetch(`${url}/profile/${username}`, {\n        method: 'DELETE',\n        credentials: \"include\"\n    }).then(response => response.json());\n\nexport default {\n    login,\n    logout,\n    register,\n    getProfile,\n    getProfileForUser,\n    updateProfile: updateUser,\n    deleteProfileByUsername,\n    getUserById: getProfileById\n}\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\n\nconst AlertComponent = ({alertType, message, clear}) =>\n    <div className={`alert alert-${alertType}`}>\n        {message}\n        {\n            clear &&\n            <button className={\"float-right btn\"} onClick={clear}>\n                <FontAwesomeIcon icon={faTimes}/>\n            </button>\n        }\n    </div>\n\nexport default AlertComponent\n","import dummyMedia from \"../utils/DummyMediaData\";\n\nclass MediumService {\n\n    //url = 'http://localhost:8080/api';\n    url = 'https://acabey-server-java.herokuapp.com/api';\n\n    constructor() {\n        //this.tvdbClient = new TVDBClient();\n        const TVDB = require('node-tvdb');\n        this.tvdb = new TVDB('e5094420c444a38c3b46f926de91dde3');\n    }\n\n    createMedium = (userId, medium) =>\n        fetch(`${this.url}/users/${userId}/media`, {\n            method: 'POST',\n            body: JSON.stringify(medium),\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n            .then(response => response.json());\n\n    findMediaForUser = (userId) =>\n        fetch(`${this.url}/users/${userId}/media`)\n            .then(response => response.json());\n\n    findMediaForWatchlist = (watchlistId) =>\n        fetch(`${this.url}/watchlists/${watchlistId}/media`, {\n            method: 'GET',\n            credentials: \"include\"\n        })\n            .then(response => response.json());\n\n    findMediumById = (mediumId) =>\n        fetch(`${this.url}/media/${mediumId}`, {\n            method: 'GET'\n        })\n            .then(response => response.json());\n\n    findAllMedia = (mediumId) =>\n        fetch(`${this.url}/media`, {\n            method: 'GET'\n        })\n            .then(response => response.json());\n\n    updateMedium = (mediumId, medium) =>\n        fetch(`${this.url}/media/${mediumId}`, {\n            method: 'PUT',\n            body: JSON.stringify(medium),\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n            .then(response => response.json());\n\n    deleteMedium = (mediumId) =>\n        fetch(`${this.url}/media/${mediumId}`, {\n            method: 'DELETE'\n        })\n            .then(response => response.json());\n\n    searchMediaByTitle = (title) =>\n        fetch(`${this.url}/search/${title}`, {\n            method: 'GET'\n        })\n            .then(response => response.json());\n\n    //searchMediaByTitle = (title) =>\n    //    new Promise((resolve, reject) => {\n    //        resolve(JSON.stringify(dummyMedia));\n    //    })\n    //        .then(media => JSON.parse(media));\n    //        //.then(response => response.json());\n}\n\n\nexport default new MediumService();\n","const initialState = {\n    media: [],\n    error: ''\n};\n\nconst mediumReducer = (state=initialState, event) => {\n    switch (event.type) {\n        case \"CREATE_MEDIUM\":\n            return {\n                ...state,\n                media: [\n                    ...state.media,\n                    event.newMedium\n                ]\n            };\n            break\n        case \"DELETE_MEDIUM\":\n            return {\n                ...state,\n                media: state.media.filter(medium => medium.id !== event.mediumId)\n            };\n            break\n        case \"UPDATE_MEDIUM\":\n            return {\n                ...state,\n                media: state.media.map(\n                    medium => medium.id === event.updatedMedium.id ?\n                        event.updatedMedium : medium )\n            };\n        case \"FIND_MEDIA\":\n            return {\n                ...state,\n                media: event.media,\n                error: ''\n            };\n            break\n        case \"FIND_MEDIA_ERROR\":\n            return {\n                ...state,\n                error: event.error\n            };\n            break\n        default:\n            return state\n    }\n};\n\nexport default mediumReducer\n","import React from \"react\";\nimport {faList, faSearch, faTv, faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {Link} from \"react-router-dom\";\nimport userService from \"../services/userService\";\n\nclass NavComponent extends React.Component {\n\n    state = {\n        searchTerm: '',\n        errorMessage: '',\n    };\n\n    componentDidMount = () => {\n        this.props.getProfile();\n        if (this.props.match.params.title) {\n            this.setState({searchTerm: decodeURI(this.props.match.params.title)})\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.title !== prevProps.match.params.title) {\n            this.setState({searchTerm: decodeURI(this.props.match.params.title)})\n            this.props.getProfile();\n        }\n    }\n\n    handleKeys = (e) => {\n        if (e.key === \"Enter\") {\n            this.search()\n        }\n    };\n\n\n    search = () => {\n        if (this.state.searchTerm) {\n            this.props.history.push(`/search/${encodeURI(this.state.searchTerm)}`)\n            this.props.searchMedia(this.state.searchTerm);\n        }\n    };\n\n    render = () =>\n        <nav className=\"navbar navbar-expand navbar-light justify-content-between fixed-top wbdv-navbar bg-mute-secondary\">\n            <div className=\"collapse navbar-collapse\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item dropdown\">\n                        <Link className=\"btn navbar-brand nav-link\"\n                                to={\"/\"}>\n                            <span className=\"wbdv-field wbdv-hamburger mr-2\">\n                                <FontAwesomeIcon className={`color-primary`} icon={faTv} size={'1x'}/>\n                            </span>\n                            <strong className=\"wbdv-label wbdv-course-manager d-none d-md-inline text-mute-primary\">\n                                What to Watch\n                            </strong>\n                        </Link>\n                    </li>\n                </ul>\n\n                <input className=\"form-control mr-4 bg-transparent-0 rounded-0 wbdv-field wbdv-new-course text-black-50\"\n                       type=\"text\"\n                       placeholder=\"Search\"\n                       aria-label=\"Search media\"\n                       onKeyPress={this.handleKeys}\n                       onChange={(e) => this.setState({searchTerm: e.target.value})}/>\n\n                <div className=\"navbar-light navbar-nav\">\n                    <button\n                        className=\"btn nav-link wbdv-button wbdv-search\"\n                        onClick={this.search}>\n                        <FontAwesomeIcon className={`color-primary`} icon={faSearch} size={'2x'}/>\n                    </button>\n                </div>\n\n                <div className=\"nav-item navbar-light navbar-nav dropdown\">\n                    <button className=\"btn nav-link dropdown-toggle\"\n                            id=\"navbarDropdown\"\n                            role=\"button\"\n                            data-toggle=\"dropdown\"\n                            aria-haspopup=\"true\"\n                            aria-expanded=\"false\">\n                        <FontAwesomeIcon className={`color-primary`} icon={faUserCircle} size={'2x'}/>\n                    </button>\n                    {\n                        this.props.user ?\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <Link className=\"dropdown-item\" to=\"/profile\">Profile</Link>\n                                <Link className=\"dropdown-item\" to=\"/logout\">Logout</Link>\n                            </div>\n                            :\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <Link className=\"dropdown-item\" to=\"/login\">Login</Link>\n                                <Link className=\"dropdown-item\" to=\"/register\">Register</Link>\n                            </div>\n                    }\n                </div>\n            </div>\n        </nav>\n\n}\n\nexport default NavComponent\n","import {connect} from \"react-redux\";\nimport MediumService from \"../services/MediumService\";\nimport mediumReducer from \"../reducers/mediumReducer\";\nimport NavComponent from \"../components/NavComponent\";\nimport userService from \"../services/userService\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        media: state.mediumReducer.media,\n        user: state.userReducer.user,\n        match: ownProps.match,\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        searchMedia: (title) => {\n            MediumService.searchMediaByTitle(title)\n                .then(actualMedia => {\n                    !actualMedia.error ?\n                        dispatch({\n                            type: \"FIND_MEDIA\",\n                            media: actualMedia\n                        })\n                        :\n                        dispatch({\n                            type: \"FIND_MEDIA_ERROR\",\n                            error: actualMedia\n                        })\n                })\n        },\n        getProfile: () => {\n            userService.getProfile()\n                .then(foundUser => {\n                    if(!foundUser || foundUser.error) {\n                        // Not signed in\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: foundUser\n                        })\n                    }\n                })\n        },\n        logout: () => {\n            userService.logout()\n                .then(foundUser => {\n                    if(!foundUser || foundUser.error) {\n                        // Not signed in\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: foundUser\n                        })\n                    }\n                })\n        }\n    }\n};\n\nconst NavContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(NavComponent);\n\nexport default NavContainer;\n","import React from \"react\";\nimport userService from \"../services/userService\";\nimport AlertComponent from \"./AlertComponent\";\nimport NavContainer from \"../container/NavContainer\";\nimport {Container} from \"react-bootstrap\";\n\nclass ProfileEditComponent extends React.Component {\n\n    state = {\n        username: '',\n        password: '',\n        email: '',\n        role: '',\n        bio: '',\n        imageUrl: '',\n        successMessage: ''\n    };\n\n    componentDidMount = () => {\n        userService.getProfile()\n            .catch(e => {\n                this.props.history.push(\"/login\")\n            })\n            .then(user => {\n                if(!user) {\n                    console.error(`Invalid response from server on login`)\n                }\n                else if (user.error) {\n                    this.setState({errorMessage: user.message})\n                }\n                else {\n                    this.setState({\n                        username: user.username,\n                        password: user.password,\n                        email: user.email,\n                        role: user.role,\n                        bio: user.bio,\n                        imageUrl: user.imageUrl\n                    })\n                }\n            })\n    };\n\n    validate = () => {\n        let message;\n        let isValid = true;\n\n        if (this.state.username === '') {\n            message = 'Username cannot be blank';\n            isValid = false;\n        }\n        else if (this.state.password === '') {\n            message = 'Password cannot be blank';\n            isValid = false;\n        }\n        else if (!['USER', 'ADMIN', 'MODERATOR'].includes(this.state.role)) {\n            message = `Invalid user role: ${this.state.role}`;\n            isValid = false;\n        }\n\n        this.setState({errorMessage: message});\n        return isValid;\n    };\n\n    update = () => {\n\n        if (!this.validate()) return;\n\n        userService.updateProfile(this.state.username ,{\n            username: this.state.username,\n            password: this.state.password,\n            email: this.state.email,\n            role: this.state.role,\n            bio: this.state.bio,\n            imageUrl: this.state.imageUrl\n        })\n            .catch(e => {\n                this.props.history.push(\"/login\")\n            })\n            .then(user => {\n                if(!user) {\n                    console.error(`Invalid response from server on update`)\n                }\n                else if (user.error) {\n                    this.setState({errorMessage: user.message})\n                }\n                else {\n                    this.setState({\n                        username: user.username,\n                        password: user.password,\n                        email: user.email,\n                        role: user.role,\n                        bio: user.bio,\n                        imageUrl: user.imageUrl,\n                        successMessage: 'Successfully updated profile!'\n                    })\n                }\n            })\n    };\n\n    deleteUser = () => {\n        userService.deleteProfileByUsername(this.state.username)\n            .then(response => {\n                this.logout()\n            })\n    }\n\n    logout = () => {\n        userService.logout()\n            .then(response => this.props.history.push(\"/\"))\n    };\n\n    render = () =>\n        <div className=\"container\">\n            <NavContainer history={this.props.history} match={this.props.match}/>\n\n            <h1>Profile</h1>\n\n            {\n                this.state.successMessage &&\n                <AlertComponent alertType={'success'}\n                                message={this.state.successMessage}\n                                clear={() => {\n                                    this.setState({successMessage: ''})\n                                }}/>\n            }\n            {\n                this.state.errorMessage &&\n                <AlertComponent alertType={'danger'}\n                                message={this.state.errorMessage}\n                                clear={() => {this.setState({errorMessage: ''})}}/>\n            }\n\n            <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"exampleModalLabel\">Delete User</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            Are you sure you want to delete this account? This action cannot be undone\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                            <button type=\"button\" class=\"btn btn-danger\" onClick={this.deleteUser}>Delete</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"rounded border border-secondary bg-white\">\n                <div className=\"m-4\">\n                    <div className=\"form-group row\">\n                        <label className=\"col-lg-2 col-sm-6 col-form-label\"\n                               htmlFor=\"username\">\n                            Username\n                        </label>\n                        <div className=\"col-lg-10 col-sm-6\">\n                            <input id=\"username\"\n                                   className=\"form-control wbdv-field wbdv-username\"\n                                   value={this.state.username}\n                                   type=\"text\"\n                                   placeholder=\"Username\"\n                                   title=\"Use this username to login\"\n                                   disabled/>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-lg-2 col-sm-6 col-form-label\"\n                               htmlFor=\"password\">\n                            Password\n                        </label>\n                        <div className=\"col-lg-10 col-sm-6\">\n                            <input id=\"password\"\n                                   className=\"form-control wbdv-field wbdv-password\"\n                                   type=\"password\"\n                                   placeholder=\"Enter password\"\n                                   value={this.state.password}\n                                   onChange={(e) => {this.setState({password: e.target.value})}}\n                                   title=\"Password for this account\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-lg-2 col-sm-6 col-form-label\"\n                               htmlFor=\"email\">\n                            Email\n                        </label>\n                        <div className=\"col-lg-10 col-sm-6\">\n                            <input id=\"email\"\n                                   className=\"form-control wbdv-field wbdv-email\"\n                                   type=\"text\"\n                                   placeholder=\"Email address\"\n                                   value={this.state.email}\n                                   onChange={(e) => {this.setState({email: e.target.value})}}\n                                   title=\"Email for this account\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-lg-2 col-sm-6 col-form-label\"\n                               htmlFor=\"role\">\n                            Role\n                        </label>\n                        <div className=\"col-lg-10 col-sm-6\">\n                            <select className=\"form-control custom-select wbdv-field wbdv-role\"\n                                    id=\"role\"\n                                    value={this.state.role}\n                                    onChange={(e) => {this.setState({role: e.target.value})}}>\n                                <option value=\"USER\">User</option>\n                                <option value=\"MODERATOR\">Moderator</option>\n                                <option value=\"ADMIN\">Admin</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-lg-2 col-sm-6 col-form-label\"\n                               htmlFor=\"imageUrl\">\n                            Profile Image\n                        </label>\n                        <div className=\"col-lg-10 col-sm-6\">\n                            <input id=\"bio\"\n                                   type=\"text\"\n                                   className=\"form-control wbdv-field wbdv-image-url\"\n                                   placeholder=\"Image URL\"\n                                   value={this.state.imageUrl}\n                                   onChange={(e) => {this.setState({imageUrl: e.target.value})}}\n                                   title=\"Profile image URL\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-lg-2 col-sm-6 col-form-label\"\n                               htmlFor=\"bio\">\n                            Bio\n                        </label>\n                        <div className=\"col-lg-10 col-sm-6\">\n                            <textarea id=\"bio\"\n                                      className=\"form-control wbdv-field wbdv-bio\"\n                                      placeholder=\"Biography\"\n                                      value={this.state.bio}\n                                      onChange={(e) => {this.setState({bio: e.target.value})}}\n                                      title=\"Profile biography\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\"></label>\n                        <div className=\"col-sm-10\">\n                            <button className=\"btn btn-success btn-block wbdv-button wbdv-update\"\n                                    onClick={this.update}>\n                                Update\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\"></label>\n                        <div className=\"col-sm-10\">\n                            <button className=\"btn btn-warning btn-block wbdv-button wbdv-logout\"\n                                    onClick={this.logout}>\n                                Logout\n                            </button>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\"></label>\n                        <div className=\"col-sm-10\">\n                            <button type=\"button\" className=\"btn btn-danger btn-block wbdv-button wbdv-delete\" data-toggle=\"modal\"\n                                    data-target=\"#exampleModal\">\n                                Delete this account\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n};\n\nexport default ProfileEditComponent;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport userService from \"../services/userService\";\nimport AlertComponent from \"./AlertComponent\";\n\nclass RegisterComponent extends React.Component {\n\n    state = {\n        username: '',\n        password: '',\n        verifyPassword: '',\n        errorMessage: ''\n    };\n\n    validate = () => {\n        let message;\n        let isValid = true;\n\n        if (this.state.username === '') {\n            message = 'Username cannot be blank';\n            isValid = false;\n        }\n        else if (this.state.password === '') {\n            message = 'Password cannot be blank';\n            isValid = false;\n        }\n        else if (this.state.password !== this.state.verifyPassword) {\n            message = 'Passwords are not equal';\n            isValid = false;\n        }\n\n        this.setState({errorMessage: message});\n        return isValid;\n    };\n\n    register = () => {\n\n        // Do client side validation first\n        if (!this.validate()) return;\n\n        userService.register(this.state.username, this.state.password)\n            .then(currentUser => {\n                if (!currentUser) {\n                    console.error(\"Invalid response from server on register\");\n                }\n                else if (currentUser.error) {\n                    this.setState({errorMessage: currentUser.message});\n                }\n                else {\n                    this.props.history.push(\"/profile\")\n                }\n            })\n            .catch((e) => {\n                console.log(`Error registering ${e.toString()}`)\n            })\n    };\n\n    handleKeys = (e) => {\n        if (e.key === \"Enter\") {\n            this.register();\n        }\n    };\n\n    render = () =>\n        <div className={\"container\"}>\n\n            {\n                this.state.errorMessage &&\n                <AlertComponent message={<><strong>Error! </strong> {this.state.errorMessage}</>}\n                                alertType={'danger'}\n                                clear={() => this.setState({errorMessage: ''})}/>\n            }\n\n            <h1>Register</h1>\n\n            <div className={\"rounded border border-secondary bg-white\"}>\n                <div className={\"m-4\"}>\n\n                    <div className={\"form-group row\"}>\n                        <label for=\"username\"\n                               className={\"col-sm-2 col-form-label\"}>\n                            Username</label>\n                        <div className={\"col-sm-10\"}>\n                            <input  id=\"username\"\n                                    className={\"form-control wbdv-field wbdv-username\"}\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    title=\"Use this username to login\"\n                                    onChange={\n                                        (e) => {\n                                            this.setState({username: e.target.value})}\n                                    }\n                                    onKeyPress={this.handleKeys}/>\n                        </div>\n                    </div>\n\n                    <div className={\"form-group row\"}>\n                        <label for=\"password\"\n                               className={\"col-sm-2 col-form-label\"}>\n                            Password\n                        </label>\n                        <div className={\"col-sm-10\"}>\n                            <input  id=\"password\"\n                                    className={\"form-control wbdv-field wbdv-password\"}\n                                    type=\"password\"\n                                    onChange={\n                                        (e) => {\n                                            this.setState({password: e.target.value})}\n                                    }\n                                    onKeyPress={this.handleKeys}/>\n                        </div>\n                    </div>\n\n                    <div className={\"form-group row\"}>\n                        <label for=\"verify-password\"\n                               className={\"col-sm-2 col-form-label\"}>\n                            Verify Password\n                        </label>\n                        <div className={\"col-sm-10\"}>\n                            <input  id=\"verify-password\"\n                                    className={\"form-control wbdv-field wbdv-password-verify\"}\n                                    type=\"password\"\n                                    onChange={\n                                        (e) => {\n                                            this.setState({verifyPassword: e.target.value})}\n                                    }\n                                    onKeyPress={this.handleKeys}/>\n                        </div>\n                    </div>\n\n                    <div className={\"form-group row\"}>\n                        <label className={\"col-sm-2 col-form-label\"}></label>\n                        <div className={\"col-sm-10\"}>\n                            <div className={\"form-group row\"}>\n                                <button\n                                    className={\"btn btn-primary btn-primary btn-block wbdv-button wbdv-register\"}\n                                    onClick={this.register}>\n                                    Register\n                                </button>\n                            </div>\n                            <div className={\"row\"}>\n                                <div className={\"col-6\"}>\n                                    <Link className={\"wbdv-link wbdv-login\"}\n                                          to=\"/login\">Have an account already? Login</Link>\n                                </div>\n                                <div className={\"col-6\"}>\n                                    <Link className={\"float-right wbdv-link wbdv-cancel\"}\n                                          to=\"/\">Cancel</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n        </div>\n};\n\nexport default RegisterComponent","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport userService from \"../services/userService\";\nimport AlertComponent from \"./AlertComponent\";\n\nclass LoginComponent extends React.Component {\n\n    state = {\n        username: '',\n        password: '',\n    };\n\n    validate = () => {\n        let message;\n        let isValid = true;\n\n        if (this.state.username === '') {\n            message = 'Username cannot be blank';\n            isValid = false;\n        }\n        else if (this.state.password === '') {\n            message = 'Password cannot be blank';\n            isValid = false;\n        }\n\n        this.setState({errorMessage: message});\n        return isValid;\n    };\n\n    login = () => {\n\n        if (!this.validate()) return;\n\n        this.props.login(this.state.username, this.state.password);\n\n        this.props.history.push('/');\n\n    };\n\n    handleKeys = (e) => {\n        if (e.key === \"Enter\") {\n            this.login();\n        }\n    };\n\n    render = () =>\n        <div className=\"container\">\n\n            {\n                this.props.error &&\n                <AlertComponent message={<><strong>Error! </strong> {this.props.error}</>}\n                                alertType={'danger'}\n                                clear={() => this.props.setError('')}/>\n            }\n\n            <h1>Sign In</h1>\n            <div className=\"rounded border border-secondary bg-white\">\n                <div className=\"m-4\">\n                    <div className=\"form-group row\">\n                        <label htmlFor=\"username\" className=\"col-sm-2 col-form-label\">\n                            Username </label>\n                        <div className=\"col-sm-10\">\n                            <input className=\"form-control wbdv-field wbdv-username\"\n                                   id=\"username\"\n                                   placeholder=\"Username\"\n                                   onChange={(e) => {\n                                       this.setState({username: e.target.value})}\n                                   }\n                                   onKeyPress={this.handleKeys}/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label htmlFor=\"password\" className=\"col-sm-2 col-form-label\">\n                            Password </label>\n                        <div className=\"col-sm-10\">\n                            <input type=\"password\"\n                                   className=\"form-control wbdv-field wbdv-password\"\n                                   id=\"password\" placeholder=\"Password\"\n                                   onChange={(e) => {\n                                       this.setState({password: e.target.value})}\n                                   }\n                                   onKeyPress={this.handleKeys}/>\n                        </div>\n                    </div>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\"></label>\n                        <div className=\"col-sm-10\">\n                            <button className=\"btn btn-primary btn-block wbdv-login\" onClick={this.login}>Sign in\n                            </button>\n                            <div className=\"row\">\n                                <div className=\"col-6\">\n                                    {/*<a href=\"#\" className=\"wbdv-link wbdv-forgot-password\">Forgot Password?</a>*/}\n                                </div>\n                                <div className=\"col-6\">\n                                    <Link className=\"float-right wbdv-link wbdv-register\"\n                                          to=\"/register\">Sign up</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n}\nexport default LoginComponent;\n","import {connect} from \"react-redux\";\nimport LoginComponent from \"../components/LoginComponent\";\nimport userService from \"../services/userService\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        user: state.userReducer.user,\n        errorMessage: state.userReducer.errorMessage,\n        match: ownProps.match,\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        login: (username, password) => {\n            userService.login(username, password)\n                .then(currentUser => {\n                    if (!currentUser) {\n                        console.error(\"Invalid response body for login\")\n                        dispatch({\n                            type: \"SET_ERROR\",\n                            error: \"Null reply on login\"\n                        });\n                    }\n                    else if (currentUser.error) {\n                        dispatch({\n                            type: \"SET_ERROR\",\n                            error: currentUser.message\n                        });\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: currentUser\n                        });\n                    }\n                })\n                .catch(e => {\n                    console.error(`Error on login: ${e}`);\n                    dispatch({\n                        type: \"SET_ERROR\",\n                        error: e\n                    });\n                })\n        },\n        logout: () => {\n            dispatch({\n                type: \"SIGN_OUT\",\n            });\n        },\n        setError: (message) => {\n            dispatch({\n                type: \"SET_ERROR\",\n                error: message\n            });\n\n        }\n    }\n};\n\nconst LoginContainer= connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(LoginComponent);\n\nexport default LoginContainer;\n","import React from \"react\";\n\nclass LogoutComponent extends React.Component {\n    componentDidMount = () => {\n        this.props.logout();\n        this.props.history.push('/')\n    };\n\n    render = () => <></>\n}\n\nexport default LogoutComponent;","import {connect} from \"react-redux\";\nimport LoginComponent from \"../components/LoginComponent\";\nimport userService from \"../services/userService\";\nimport LogoutComponent from \"../components/LogoutComponent\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        user: state.userReducer.user,\n        errorMessage: state.userReducer.errorMessage,\n        match: ownProps.match,\n        history: ownProps.history\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        login: (username, password) => {\n            userService.login(username, password)\n                .then(currentUser => {\n                    if (!currentUser) {\n                        console.error(\"Invalid response body for login\")\n                        dispatch({\n                            type: \"SET_ERROR\",\n                            error: \"Null reply on login\"\n                        });\n                    }\n                    else if (currentUser.error) {\n                        dispatch({\n                            type: \"SET_ERROR\",\n                            error: currentUser.message\n                        });\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: currentUser\n                        });\n                    }\n                })\n                .catch(e => {\n                    console.error(`Error on login: ${e}`);\n                    dispatch({\n                        type: \"SET_ERROR\",\n                        error: e\n                    });\n                })\n        },\n        logout: () => {\n            userService.logout()\n                .then(() => {\n                    dispatch({\n                        type: \"SIGN_OUT\",\n                    });\n                })\n                .catch(() => {\n                });\n        },\n        setError: (message) => {\n            dispatch({\n                type: \"SET_ERROR\",\n                error: message\n            });\n\n        }\n    }\n};\n\nconst LogoutContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(LogoutComponent);\n\nexport default LogoutContainer;\n","const url = 'https://acabey-server-java.herokuapp.com/api';\n//const url = 'http://localhost:8080/api';\n\nexport const createWatchlist = (userId, watchlist) =>\n    fetch(`${url}/users/${userId}/watchlists`, {\n        method: 'POST',\n        body: JSON.stringify(watchlist),\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n        .then(response => response.json());\n\nexport const findWatchlistsForUser = (userId) =>\n    fetch(`${url}/users/${userId}/watchlists`)\n        .then(response => response.json());\n\nexport const findWatchlistById = (watchlistId) =>\n    fetch(`${url}/watchlists/${watchlistId}`, {\n        method: 'GET'\n    })\n        .then(response => response.json());\n\nexport const findAllWatchlists = (watchlistId) =>\n    fetch(`${url}/watchlists`, {\n        method: 'GET'\n    })\n        .then(response => response.json());\n\nexport const updateWatchlist = (watchlistId, watchlist) =>\n    fetch(`${url}/watchlists/${watchlistId}`, {\n        method: 'PUT',\n        body: JSON.stringify(watchlist),\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n        .then(response => response.json());\n\nexport const deleteWatchlist= (watchlistId) =>\n    fetch(`${url}/watchlists/${watchlistId}`, {\n        method: 'DELETE'\n    })\n        .then(response => response.json());\n\n\nexport default {\n    createWatchlist,\n    findWatchlistsForUser,\n    findWatchlistById,\n    findAllWatchlists,\n    updateWatchlist,\n    deleteWatchlist\n}\n","const initialState = {\n    watchlists: [],\n    selectedWatchlists: []\n};\n\nconst watchlistReducer = (state=initialState, event) => {\n    switch (event.type) {\n        case \"CREATE_WATCHLIST\":\n            return {\n                watchlists: [\n                    ...state.watchlists,\n                    event.newWatchlist\n                ]\n            };\n        case \"DELETE_WATCHLIST\":\n            return {\n                watchlists: state.watchlists.filter(watchlist => watchlist.id !== event.watchlistId)\n            };\n        case \"UPDATE_WATCHLIST\":\n            return {\n                ...state,\n                watchlists: state.watchlists.map(\n                    watchlist => watchlist.id === event.updatedWatchlist.id ?\n                        event.updatedWatchlist : watchlist )\n            };\n        case \"FIND_WATCHLISTS\":\n            return {\n                ...state,\n                watchlists: event.watchlists\n            };\n        case \"SELECT_WATCHLISTS\":\n            return {\n                ...state,\n                selectedWatchlists: event.selectedWatchlists\n            };\n        default:\n            return state\n    }\n};\n\nexport default watchlistReducer\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport userService from \"../services/userService\";\n\nconst TVDBUrl = 'https://thetvdb.com';\n\nclass WatchlistCardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hover: false,\n            owner: null\n        }\n    }\n\n    componentDidMount = () => {\n        userService.getUserById(this.props.watchlist.ownerId)\n            .then((ownerResp) => {\n                    if (ownerResp && !ownerResp.error) {\n                        this.setState({owner: ownerResp});\n                    } else {\n                        console.error(`Failed to get user: ${ownerResp.error}`);\n                    }\n                }\n            )\n            .catch((error) => {\n                console.error(`Failed to get user: ${error.toString()}`);\n            })\n    };\n\n    toggleHover = () => {\n        this.setState({hover: !this.state.hover})\n    };\n\n    getImage = () => \"https://thetvdb.com/banners/posters/83268-1_t.jpg\"\n\n\n    render = () =>\n        <div className={`bg-mute-tertiary`}\n             onMouseEnter={this.toggleHover}\n             onMouseLeave={this.toggleHover}>\n            <div className={'card-img-top vh-20'} style={{\n                \"background-image\": `url(\"${this.getImage()}\")`,\n                \"background-repeat\": \"no-repeat\",\n                \"background-position\": \"contain contain\",\n                \"background-size\": \"100% 100%\"\n            }}>\n            </div>\n            {\n                //<img className=\"card-img-top\"\n                //     src={`${TVDBUrl}${this.props.watchlist.image}`}\n                //     alt=\"Card image cap\"/>\n            }\n            <div className=\"card-body border-top\">\n                <div>\n                    <Tooltip title={`${this.state.owner ? this.state.owner.username : this.props.watchlist.id}`}>\n                        <Link to={`/watchlists/${this.props.watchlist.id}`}>\n                            <strong className=\"text-white\">{this.props.watchlist.title}</strong>\n                        </Link>\n                    </Tooltip>\n                </div>\n            </div>\n        </div>\n}\n\n\nexport default WatchlistCardComponent\n","import React from 'react'\nimport WatchlistCardComponent from \"./WatchlistCardComponent\";\n\nclass WatchlistListComponent extends React.Component {\n\n    componentDidMount() {\n        if (this.props.user && !this.props.user.error) {\n            this.props.findWatchlistsForUser(this.props.user.id);\n        } else {\n            this.props.findAllWatchlists();\n        }\n    }\n\n    render = () =>\n        <div className={\"\"}>\n            <div className=\"ml-2 mr-2\">\n                <div className=\"row\">\n                    {\n                        this.props.watchlists.map(watchlist =>\n                            <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-2\">\n                                <WatchlistCardComponent\n                                    watchlist={watchlist}\n                                    key={watchlist.id}/>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n        </div>\n}\n\nexport default WatchlistListComponent;","import {connect} from \"react-redux\";\nimport WatchlistService from \"../services/WatchlistService\";\nimport watchlistReducer from \"../reducers/watchlistReducer\";\nimport WatchlistListComponent from \"../components/WatchlistListComponent\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        watchlists: state.watchlistReducer.watchlists,\n        editingWatchlist: state.watchlistReducer.editingWatchlist,\n        params: ownProps.params,\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        findAllWatchlists: () => {\n            WatchlistService.findAllWatchlists()\n                .then(actualWatchlists => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: actualWatchlists\n                }))\n        },\n    }\n};\n\nconst TopWatchlistContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(WatchlistListComponent);\n\nexport default TopWatchlistContainer;\n","import React from 'react'\n\nclass MediumListComponent extends React.Component {\n\n    state = {\n        sortDescription: 'AZ_ASC'\n    };\n\n    toggleSort = () => {\n        this.setState((prevState) => ({\n            sortDescription: prevState.sortDescription === 'AZ_ASC' ? 'AZ_DESC' : 'AZ_ASC'\n        }))\n    };\n\n    sortMedia = (media) => media;\n\n    //sortMedia = (media) => {\n    //    if (media.length == 0) {\n    //        return media;\n    //    }\n    //    if (this.state.sortDescription === 'AZ_ASC') {\n    //        return this.sortAZasc(media);\n    //    } else {\n    //        return this.sortAZdesc(media);\n    //    }\n    //};\n\n    sortAZdesc = (media) => {\n        return media.sort((a, b) => {\n            if (a.title && b.title) {\n                return a.title.localeCompare(b.title)\n            } else {\n                return 0;\n            }\n        })\n    };\n\n    sortAZasc = (media) => {\n        return media.sort((a, b) => {\n            if (a.title && b.title) {\n                return b.title.localeCompare(a.title)\n            } else {\n                return 0;\n            }\n        })\n    };\n}\n\n\nexport default MediumListComponent\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {faTrash, faPencilAlt, faCheck, faBan, faFile, faPlusCircle} from '@fortawesome/free-solid-svg-icons'\nimport MediumListComponent from \"./MediumListComponent\";\nimport {Link} from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {faCheckCircle, faCircle} from \"@fortawesome/free-regular-svg-icons\";\n\nconst TVDBUrl = 'https://thetvdb.com';\n\nclass MediumCardComponent extends MediumListComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hover: false,\n            selected: false\n        }\n    }\n\n    toggleHover = () => {\n        this.setState({hover: !this.state.hover})\n    };\n\n    toggleSelected = () => {\n        this.setState({selected: !this.state.selected})\n    };\n\n    getImage = () => \"https://thetvdb.com/banners/posters/83268-1_t.jpg\"\n\n\n    render = () =>\n        <div className={`bg-mute-tertiary`}\n             onMouseEnter={this.toggleHover}\n             onMouseLeave={this.toggleHover}>\n            <div className={'card-img-top vh-20'} style={{\n                \"background-image\": `url(\"${this.getImage()}\")`,\n                \"background-repeat\": \"no-repeat\",\n                \"background-position\": \"contain contain\",\n                \"background-size\": \"100% 100%\"\n            }}>\n                {\n                    (this.state.hover || this.state.selected) &&\n                    <>\n                        <Tooltip title=\"Select\" className={'float-left'}>\n                            <IconButton aria-label=\"Add to watchlist\" onClick={this.toggleSelected}>\n                                <FontAwesomeIcon className={\"color-white\"} icon={this.state.selected ? faCheckCircle : faCircle} inverse={false}\n                                                 size={\"1x\"}/>\n                            </IconButton>\n                        </Tooltip>\n\n                        <Tooltip title=\"Add to watchlist\" className={'float-right'}>\n                            <IconButton aria-label=\"Add to watchlist\">\n                                <FontAwesomeIcon className={\"color-white\"} icon={faPlusCircle} inverse={false} size={\"1x\"}/>\n                            </IconButton>\n                        </Tooltip>\n                    </>\n                }\n            </div>\n            {\n                //<img className=\"card-img-top\"\n                //     src={`${TVDBUrl}${this.props.medium.image}`}\n                //     alt=\"Card image cap\"/>\n            }\n            <div className=\"card-body border-top\">\n                <div>\n                    <Tooltip title={`${this.props.medium.title} (${new Date(this.props.medium.firstAired).getFullYear()})`}>\n                        <Link to={`/details/${this.props.medium.tvdbId}`}>\n                            <strong className=\"text-white\">{this.props.medium.title} ({new Date(this.props.medium.firstAired).getFullYear()})</strong>\n                        </Link>\n                    </Tooltip>\n                </div>\n            </div>\n        </div>\n}\n\n\nexport default MediumCardComponent\n","import React from 'react'\nimport MediumCardComponent from \"./MediumCardComponent\";\nimport MediumListComponent from \"./MediumListComponent\";\nimport MediumGridHeadComponent from \"./MediumGridHeadComponent\";\n\n/**\n * xs | 1\n * sm | 2\n * md | 3\n * lg | 4\n * xl | 6\n */\nclass MediumGridComponent extends MediumListComponent {\n\n    render = () =>\n        <div className={\"\"}>\n            <div className=\"ml-2 mr-2\">\n                <div className=\"row\">\n                    {\n                        this.sortMedia(this.props.media).map(medium =>\n                            <div className=\"col-xs-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 mb-2\">\n                                <MediumCardComponent\n                                    medium={medium}\n                                    key={medium.id}/>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n        </div>\n\n}\nexport default MediumGridComponent\n","import React from \"react\";\nimport {Row} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faEllipsisV, faPlus, faPlusCircle, faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport Link from \"@material-ui/core/Link\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {faCheckCircle, faCircle} from \"@fortawesome/free-regular-svg-icons\";\nimport WatchlistDropdownComponent from \"./WatchlistDropdownComponent\";\n\nclass WatchlistBarComponent extends React.Component {\n\n    componentDidMount = () => {\n        this.props.getProfile();\n        if (this.props.user) {\n            this.props.findWatchlistsForUser(this.props.user.id);\n        }\n    };\n\n    render = () =>\n        <Row>\n            {\n                this.props.user ?\n                    <>\n                        <div className=\"nav-item navbar-light navbar-nav dropdown\">\n                            <Tooltip title=\"Select watchlists\" className={'float-left'}>\n                                <IconButton\n                                    className=\"btn nav-link dropdown-toggle caret-off ml-2 mb-2\"\n                                    id=\"watchlistDropdown\"\n                                    role=\"button\"\n                                    data-toggle=\"dropdown\"\n                                    aria-haspopup=\"true\"\n                                    aria-expanded=\"false\"\n                                    aria-label=\"Select watchlists\">\n                                    <FontAwesomeIcon icon={faEllipsisV}/>\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n\n                        <div className=\"dropdown-menu bg-mute-dropdown\" aria-labelledby=\"watchlistDropdown\">\n                            {/*this.props.watchlists && this.props.watchlists.map((watchlist) => <button className=\"btn dropdown-item bg-mute-dropdown-select text-white\">{watchlist.title}</button>)*/}\n                            {/*this.props.watchlists && this.props.watchlists.map((watchlist) => <span className=\"dropdown-item bg-mute-dropdown-select text-white\">{watchlist.title}</span>)*/}\n                            <button className=\"btn dropdown-item bg-mute-dropdown-select text-white border-top\" to=\"/watchlists\">Create new watchlist</button>\n                        </div>\n\n                        <Tooltip title=\"Add to watchlist\" className={'float-left'}>\n                            <IconButton\n                                className=\"btn nav-link caret-off ml-2 float-right\"\n                                aria-label=\"Add to watchlist\"\n                                onClick={this.props}>\n                                <FontAwesomeIcon icon={faPlus}/>\n                            </IconButton>\n                        </Tooltip>\n                    </>\n                    :\n                    <Link to={\"/login\"} className={\"ml-2 text-color-primary\"}>\n                        Sign in to add to watchlists\n                    </Link>\n            }\n        </Row>\n\n}\n\nexport default WatchlistBarComponent;","import {connect} from \"react-redux\";\nimport WatchlistService from \"../services/WatchlistService\";\nimport WatchlistBarComponent from \"../components/WatchlistBarComponent\";\nimport userService from \"../services/userService\";\nimport MediumService from \"../services/MediumService\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        watchlists: state.watchlistReducer.watchlists,\n        selectedWatchlists: state.watchlistReducer.selectedWatchlists,\n        user: state.userReducer.user,\n        match: ownProps.match\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        watchMedia: (watchlistId, media) => {\n            for (let i = 0; i < media.length; i++)  {\n                let medium = media[i];\n                WatchlistService.watchMedium(watchlistId, medium)\n                    .then((resp) => {\n                        if(!resp || resp.error) {\n                            // Not signed in\n                        }\n                        else {\n                            dispatch({\n                                type: \"WATCH_MEDIUM\",\n                                watchlistId: watchlistId,\n                                medium: medium\n                            })\n                        }\n                    })\n            }\n        },\n        getProfile: () => {\n            userService.getProfile()\n                .then(foundUser => {\n                    if(!foundUser || foundUser.error) {\n                        // Not signed in\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: foundUser\n                        })\n                    }\n                })\n        },\n        findWatchlistsForUser: (userId) =>  {\n            WatchlistService.findWatchlistsForUser(userId)\n                .then(watchlistsForUser => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: watchlistsForUser\n                })).catch(error => dispatch({\n                type: 'FIND_WATCHLISTS',\n                watchlists: []\n            }))\n        },\n        findAllWatchlists: () => {\n            WatchlistService.findAllWatchlists()\n                .then(actualWatchlists => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: actualWatchlists\n                }))\n        },\n        updateWatchlist: (watchlistId, newWatchlistData) => {\n            newWatchlistData.id = watchlistId; // Ensure proper ID is set in the replacement\n            WatchlistService.updateWatchlist(watchlistId, newWatchlistData)\n                .then(didUpdate => {\n                    if (didUpdate)\n                        dispatch({\n                            type: 'UPDATE_WATCHLIST',\n                            watchlistId: watchlistId,\n                            updatedWatchlist: newWatchlistData\n                        })\n                })\n        },\n        createWatchlist: (userId, newWatchlist) => {\n            WatchlistService.createWatchlist(userId, newWatchlist)\n                .then(actualNewWatchlist => dispatch({\n                    type: \"CREATE_WATCHLIST\",\n                    newWatchlist: actualNewWatchlist\n                }))\n        },\n        deleteWatchlist: (watchlistId) => {\n            WatchlistService.deleteWatchlist(watchlistId)\n                .then(status => dispatch({\n                    type: \"DELETE_WATCHLIST\",\n                    watchlistId: watchlistId\n                }))\n        },\n        selectWatchlists: (watchlistIds) => {\n            dispatch({\n                type: \"SELECT_WATCHLISTS\",\n                media: watchlistIds\n            })\n        }\n    }\n};\n\nconst WatchlistBarContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(WatchlistBarComponent);\n\nexport default WatchlistBarContainer;\n","import React from \"react\";\nimport MediumGridComponent from \"./MediumGridComponent\";\nimport userService from \"../services/userService\";\nimport AlertComponent from \"./AlertComponent\";\nimport WatchlistBarContainer from \"../container/WatchlistBarContainer\";\n\nclass SearchMediaComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render = () =>\n        this.props.error ?\n            <AlertComponent alertType={'danger'}\n                            message={this.props.error.message}/>\n            :\n            <>\n            <WatchlistBarContainer/>\n            <MediumGridComponent\n                media={this.props.media}/>\n            </>\n}\n\nexport default SearchMediaComponent\n","import {connect} from \"react-redux\";\nimport SearchMediaComponent from \"../components/SearchMediaComponent\";\nimport MediumService from \"../services/MediumService\";\nimport mediumReducer from \"../reducers/mediumReducer\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        media: state.mediumReducer.media,\n        selectedMedia: state.mediumReducer.selectedMedia,\n        error: state.mediumReducer.error,\n        match: ownProps.match\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        findMediaForUser: (username) =>  {\n            MediumService.findMediaForUser(username)\n                .then(mediaForUser => dispatch({\n                    type: 'FIND_MEDIA',\n                    media: mediaForUser\n                }))\n                .catch(error => {\n                    console.error('Could not find media for user')\n                })\n        },\n        findAllMedia: () => {\n            MediumService.findAllMedia()\n                .then(actualMedia => dispatch({\n                    type: 'FIND_MEDIA',\n                    media: actualMedia\n                }))\n        },\n        updateMedium: (mediumId, newMediumData) => {\n            newMediumData.id = mediumId; // Ensure proper ID is set in the replacement\n            MediumService.updateMedium(mediumId, newMediumData)\n                .then(didUpdate => {\n                    if (didUpdate)\n                        dispatch({\n                            type: 'UPDATE_MEDIUM',\n                            updatedMedium: newMediumData\n                        })\n                })\n        },\n        createMedium: (username, newMedium) => {\n            MediumService.createMedium(username, newMedium)\n                .then(actualNewMedium => dispatch({\n                    type: \"CREATE_MEDIUM\",\n                    newMedium: actualNewMedium\n                }))\n        },\n        deleteMedium: (mediumId) => {\n            MediumService.deleteMedium(mediumId)\n                .then(status => dispatch({\n                    type: \"DELETE_MEDIUM\",\n                    mediumId: mediumId\n                }))\n        },\n        searchMedia: (title) => {\n            MediumService.searchMediaByTitle(title)\n                .then(actualMedia => {\n                    !actualMedia.error ?\n                        dispatch({\n                            type: \"FIND_MEDIA\",\n                            media: actualMedia\n                        })\n                        :\n                        dispatch({\n                            type: \"FIND_MEDIA_ERROR\",\n                            error: actualMedia\n                        })\n                })\n        }\n    }\n};\n\nconst SearchMediaContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(SearchMediaComponent);\n\nexport default SearchMediaContainer;\n","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport './HomeComponent.css'\nimport TopWatchlistContainer from \"../container/TopWatchlistsContainer\";\nimport SearchMediaContainer from \"../container/SearchMediaContainer\";\nimport NavContainer from \"../container/NavContainer\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheckCircle, faCircle} from \"@fortawesome/free-regular-svg-icons\";\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nclass HomeComponent extends React.Component {\n\n    componentDidMount = () => {\n        this.props.getProfile();\n        if (this.props.user) {\n            this.props.findWatchlistsForUser(this.props.user.id);\n        }\n    };\n\n    createWatchlist = () => {\n        this.props.createWatchlist(this.props.user.id, {\n            title: 'New Watchlist'\n        })\n    };\n\n    render = () =>\n        <Container fluid={true}>\n\n            <NavContainer history={this.props.history} match={this.props.match}/>\n\n            {\n                this.props.match.params.title ?\n                    <SearchMediaContainer history={this.props.history} match={this.props.match}/>\n                    :\n                    <>\n                        <h5 className={`text-secondary`}>Top Public Watchlists</h5>\n                        <TopWatchlistContainer/>\n                        {\n                            this.props.user &&\n                            <>\n                                <h5 className={`text-secondary`}>My Watchlists</h5>\n                                <TopWatchlistContainer/>\n                                <Tooltip title=\"Create new watchlist\" className={'float-left'}>\n                                    <IconButton aria-label=\"Create new watchlist\" onClick={() => this.createWatchlist()}>\n                                        <FontAwesomeIcon className={\"color-mute-tertiary\"} icon={faPlusCircle} inverse={false}\n                                                         size={\"2x\"}/>\n                                    </IconButton>\n                                </Tooltip>\n                            </>\n                        }\n                    </>\n            }\n\n        </Container>\n}\n\nexport default HomeComponent\n","import {connect} from \"react-redux\";\nimport WatchlistService from \"../services/WatchlistService\";\nimport userService from \"../services/userService\";\nimport HomeComponent from \"../components/HomeComponent\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        watchlists: state.watchlistReducer.watchlists,\n        selectedWatchlists: state.watchlistReducer.selectedWatchlists,\n        user: state.userReducer.user,\n        match: ownProps.match\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        getProfile: () => {\n            userService.getProfile()\n                .then(foundUser => {\n                    if(!foundUser || foundUser.error) {\n                        // Not signed in\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: foundUser\n                        })\n                    }\n                })\n        },\n        findWatchlistsForUser: (userId) =>  {\n            WatchlistService.findWatchlistsForUser(userId)\n                .then(watchlistsForUser => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: watchlistsForUser\n                })).catch(error => dispatch({\n                type: 'FIND_WATCHLISTS',\n                watchlists: []\n            }))\n        },\n        findAllWatchlists: () => {\n            WatchlistService.findAllWatchlists()\n                .then(actualWatchlists => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: actualWatchlists\n                }))\n        },\n        updateWatchlist: (watchlistId, newWatchlistData) => {\n            newWatchlistData.id = watchlistId; // Ensure proper ID is set in the replacement\n            WatchlistService.updateWatchlist(watchlistId, newWatchlistData)\n                .then(didUpdate => {\n                    if (didUpdate)\n                        dispatch({\n                            type: 'UPDATE_WATCHLIST',\n                            watchlistId: watchlistId,\n                            updatedWatchlist: newWatchlistData\n                        })\n                })\n        },\n        createWatchlist: (userId, newWatchlist) => {\n            WatchlistService.createWatchlist(userId, newWatchlist)\n                .then(actualNewWatchlist => dispatch({\n                    type: \"CREATE_WATCHLIST\",\n                    newWatchlist: actualNewWatchlist\n                }))\n        },\n        deleteWatchlist: (watchlistId) => {\n            WatchlistService.deleteWatchlist(watchlistId)\n                .then(status => dispatch({\n                    type: \"DELETE_WATCHLIST\",\n                    watchlistId: watchlistId\n                }))\n        },\n        selectWatchlists: (watchlistIds) => {\n            dispatch({\n                type: \"SELECT_WATCHLISTS\",\n                media: watchlistIds\n            })\n        }\n    }\n};\n\nconst HomeContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(HomeComponent);\n\nexport default HomeContainer;\n","import {connect} from \"react-redux\";\nimport SearchMediaComponent from \"../components/SearchMediaComponent\";\nimport MediumService from \"../services/MediumService\";\nimport mediumReducer from \"../reducers/mediumReducer\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        media: state.mediumReducer.media,\n        selectedMedia: state.mediumReducer.selectedMedia,\n        error: state.mediumReducer.error,\n        match: ownProps.match\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        findMediaForUser: (username) =>  {\n            MediumService.findMediaForUser(username)\n                .then(mediaForUser => dispatch({\n                    type: 'FIND_MEDIA',\n                    media: mediaForUser\n                }))\n                .catch(error => {\n                    console.error('Could not find media for user')\n                })\n        },\n        findAllMedia: () => {\n            MediumService.findAllMedia()\n                .then(actualMedia => dispatch({\n                    type: 'FIND_MEDIA',\n                    media: actualMedia\n                }))\n        },\n        updateMedium: (mediumId, newMediumData) => {\n            newMediumData.id = mediumId; // Ensure proper ID is set in the replacement\n            MediumService.updateMedium(mediumId, newMediumData)\n                .then(didUpdate => {\n                    if (didUpdate)\n                        dispatch({\n                            type: 'UPDATE_MEDIUM',\n                            updatedMedium: newMediumData\n                        })\n                })\n        },\n        createMedium: (username, newMedium) => {\n            MediumService.createMedium(username, newMedium)\n                .then(actualNewMedium => dispatch({\n                    type: \"CREATE_MEDIUM\",\n                    newMedium: actualNewMedium\n                }))\n        },\n        deleteMedium: (mediumId) => {\n            MediumService.deleteMedium(mediumId)\n                .then(status => dispatch({\n                    type: \"DELETE_MEDIUM\",\n                    mediumId: mediumId\n                }))\n        },\n        searchMedia: (title) => {\n            MediumService.searchMediaByTitle(title)\n                .then(actualMedia => {\n                    !actualMedia.error ?\n                        dispatch({\n                            type: \"FIND_MEDIA\",\n                            media: actualMedia\n                        })\n                        :\n                        dispatch({\n                            type: \"FIND_MEDIA_ERROR\",\n                            error: actualMedia\n                        })\n                })\n        }\n    }\n};\n\nconst MediaDetailsContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(SearchMediaComponent);\n\nexport default MediaDetailsContainer;\n","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport NavContainer from \"../container/NavContainer\";\nimport MediumGridComponent from \"./MediumGridComponent\";\nimport userService from \"../services/userService\";\nimport WatchlistService from \"../services/WatchlistService\";\nimport {Link} from \"react-router-dom\";\nimport {faBan, faCheck, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nclass WatchlistDetailsComponent extends React.Component {\n\n    state = {\n        owner: null,\n        isEditing: false,\n        updatedTitle: ''\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    toggleEditing = () => {\n        if (!this.state.isEditing) {\n            this.setState({\n                isEditing: !this.state.isEditing,\n                updatedTitle: this.props.watchlist.title\n            })\n        } else {\n            this.setState({\n                isEditing: !this.state.isEditing,\n            });\n            this.save();\n        }\n    };\n\n    save = () => {\n        this.props.updateWatchlist(this.props.match.params.watchlistId, {\n            ...this.props.watchlist,\n            title: this.state.updatedTitle\n        })\n    };\n\n    componentDidMount = () => {\n\n        if (!this.props.watchlist) {\n            this.props.setWatchlist(this.props.match.params.watchlistId);\n        }\n\n        this.props.findMediaForWatchlist(this.props.match.params.watchlistId);\n\n        userService.getUserById(this.props.watchlist.ownerId)\n            .then((ownerResp) => {\n                    if (ownerResp && !ownerResp.error) {\n                        this.setState({owner: ownerResp});\n                    } else {\n                        console.error(`Failed to get user: ${ownerResp.error}`);\n                    }\n                }\n            )\n            .catch((error) => {\n                console.error(`Failed to get user: ${error.toString()}`);\n            })\n    };\n\n    render = () =>\n        <Container fluid={false}>\n\n            <NavContainer history={this.props.history} match={this.props.match}/>\n\n            <span>\n            {\n                !this.state.isEditing ?\n                    <span><h4>{this.props.watchlist.title}</h4></span>\n                    :\n                    <span><input className={\"form-control\"}\n                                 type={\"text\"}\n                                 value={this.state.updatedTitle}\n                                 onChange={(e) => {\n                                     this.setState({updatedTitle: e.target.value})}\n                                 }/></span>\n            }\n                <button className={\"btn\"} onClick={this.toggleEditing}>\n                    <FontAwesomeIcon icon={this.state.isEditing ? faCheck : faPencilAlt }/>\n                </button>\n            </span>\n            <Link to={`/profile/${this.state.owner ? this.state.owner.username : \"\"}`}>\n                <span className={\"text-black font-italic\"}>{this.state.owner ? this.state.owner.username : \"\"}</span>\n            </Link>\n\n            <MediumGridComponent media={this.props.media}/>\n\n\n        </Container>\n}\n\nexport default WatchlistDetailsComponent\n","import {connect} from \"react-redux\";\nimport WatchlistService from \"../services/WatchlistService\";\nimport userService from \"../services/userService\";\nimport WatchlistListComponent from \"../components/WatchlistListComponent\";\nimport MediumService from \"../services/MediumService\";\nimport WatchlistDetailsComponent from \"../components/WatchlistDetailsComponent\";\n\nconst stateToPropertyMapper = (state, ownProps) => {\n    return {\n        watchlists: state.watchlistReducer.watchlists,\n        watchlist: state.watchlistReducer.watchlists[0],\n        selectedWatchlists: state.watchlistReducer.selectedWatchlists,\n        media: state.mediumReducer.media,\n        user: state.userReducer.user,\n        match: ownProps.match\n    }\n};\n\nconst dispatchToPropertyMapper = (dispatch) => {\n    return {\n        getProfile: () => {\n            userService.getProfile()\n                .then(foundUser => {\n                    if(!foundUser || foundUser.error) {\n                        // Not signed in\n                    }\n                    else {\n                        dispatch({\n                            type: \"SIGN_IN\",\n                            user: foundUser\n                        })\n                    }\n                })\n        },\n        findWatchlistsForUser: (userId) =>  {\n            WatchlistService.findWatchlistsForUser(userId)\n                .then(watchlistsForUser => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: watchlistsForUser\n                })).catch(error => dispatch({\n                type: 'FIND_WATCHLISTS',\n                watchlists: []\n            }))\n        },\n        findAllWatchlists: () => {\n            WatchlistService.findAllWatchlists()\n                .then(actualWatchlists => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: actualWatchlists\n                }))\n        },\n        setWatchlist: (watchlistId) => {\n            WatchlistService.findWatchlistById(watchlistId)\n                .then(actualWatchlist => dispatch({\n                    type: 'FIND_WATCHLISTS',\n                    watchlists: [actualWatchlist]\n                }))\n        },\n        updateWatchlist: (watchlistId, newWatchlistData) => {\n            newWatchlistData.id = watchlistId; // Ensure proper ID is set in the replacement\n\n            WatchlistService.updateWatchlist(watchlistId, newWatchlistData)\n                .then(updatedWidget => {\n                    if (updatedWidget && !updatedWidget.error)\n                        dispatch({\n                            type: 'UPDATE_WATCHLIST',\n                            watchlistId: watchlistId,\n                            updatedWatchlist: newWatchlistData\n                        });\n                    else {\n                        console.error(`Failed to update widget ${updatedWidget.error}`)\n                    }\n                })\n                .catch((error) => {\n                    console.error(`Failed to update widget ${error.toString()}`)\n                })\n        },\n        createWatchlist: (userId, newWatchlist) => {\n            WatchlistService.createWatchlist(userId, newWatchlist)\n                .then(actualNewWatchlist => dispatch({\n                    type: \"CREATE_WATCHLIST\",\n                    newWatchlist: actualNewWatchlist\n                }))\n        },\n        deleteWatchlist: (watchlistId) => {\n            WatchlistService.deleteWatchlist(watchlistId)\n                .then(status => dispatch({\n                    type: \"DELETE_WATCHLIST\",\n                    watchlistId: watchlistId\n                }))\n        },\n        selectWatchlists: (watchlistIds) => {\n            dispatch({\n                type: \"SELECT_WATCHLISTS\",\n                media: watchlistIds\n            })\n        },\n        findMediaForWatchlist: (watchlistId) => {\n            MediumService.findMediaForWatchlist(watchlistId)\n                .then((resp) => {\n                    if (resp && !resp.error) {\n                        dispatch({\n                            type: \"FIND_MEDIA\",\n                            media: resp\n                        })\n                    }\n                    else {\n                        console.error(`Failed to find media for watchlist ${watchlistId}`)\n                    }\n                })\n\n        }\n    }\n};\n\nconst WatchlistDetailsContainer = connect\n(stateToPropertyMapper, dispatchToPropertyMapper)\n(WatchlistDetailsComponent);\n\nexport default WatchlistDetailsContainer;\n","import React from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport ProfileEditComponent from \"./components/ProfileEditComponent\";\nimport RegisterComponent from \"./components/RegisterComponent\";\nimport LoginContainer from \"./container/LoginContainer\";\nimport LogoutContainer from \"./container/LogoutContainer\";\nimport HomeContainer from \"./container/HomeContainer\";\nimport MediaDetailsContainer from \"./container/MediaDetailsContainer\";\nimport WatchlistDetailsContainer from \"./container/WatchlistDetailsContainer\";\n\nfunction WhatToWatch() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Route\n                    path={['/', '/search']}\n                    exact={true}\n                    component={HomeContainer}/>\n                <Route\n                    path={'/logout'}\n                    exact={true}\n                    component={LogoutContainer}/>\n                <Route\n                    path='/search/:title'\n                    exact={true}\n                    component={HomeContainer}/>\n                <Route\n                    path='/login'\n                    exact={true}\n                    component={LoginContainer}/>\n                <Route\n                    path='/register'\n                    exact={true}\n                    component={RegisterComponent}/>\n                <Route\n                    path='/profile'\n                    exact={true}\n                    component={ProfileEditComponent}/>\n                <Route\n                    path='/details/:mediaId'\n                    exact={true}\n                    component={MediaDetailsContainer}/>\n                <Route\n                    path='/watchlists/:watchlistId'\n                    exact={true}\n                    component={WatchlistDetailsContainer}/>\n            </BrowserRouter>\n        </div>\n);\n}\n\nexport default WhatToWatch;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    user: null,\n    error: ''\n};\n\nconst userReducer = (state=initialState, event) => {\n    switch (event.type) {\n        case \"SIGN_IN\":\n            return {\n                ...state,\n                user: event.user\n            };\n        case \"SIGN_OUT\":\n            return {\n                ...state,\n                user: null\n            };\n        case \"SET_ERROR\":\n            return {\n                ...state,\n                error: event.error\n            };\n        default:\n            return state\n    }\n};\n\nexport default userReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WhatToWatch from './WhatToWatch';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'jquery/dist/jquery.min'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'popper.js/dist/popper.min'\nimport {Provider} from \"react-redux\";\nimport watchlistReducer from \"./reducers/watchlistReducer\";\nimport {combineReducers, createStore} from \"redux\";\nimport mediumReducer from \"./reducers/mediumReducer\";\nimport userReducer from \"./reducers/userReducer\";\n\nconst reducers = combineReducers({\n    watchlistReducer, mediumReducer, userReducer\n});\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <WhatToWatch />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}